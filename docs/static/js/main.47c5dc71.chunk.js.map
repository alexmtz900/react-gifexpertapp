{"version":3,"sources":["components/AddCategory.jsx","components/helpers/getGifs.js","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.js","GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","useState","category","setCategory","onSubmit","e","preventDefault","trim","length","categories","onChange","target","value","type","getGifs","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_large","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","i","ReactDOM","render","document","getElementById"],"mappings":"iNAmCeA,EAhCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAENC,mBAAS,IAFH,mBAE/BC,EAF+B,KAErBC,EAFqB,KAkBrC,OACQ,sBAAMC,SAXO,SAACC,GAClBA,EAAEC,iBAECJ,EAASK,OAAOC,OAAO,IACtBR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAkBO,OAC1CN,EAAY,MAMZ,SACI,uBACIO,SAjBU,SAACL,GACvBF,EAAYE,EAAEM,OAAOC,QAiBTA,MAAOV,EACPW,KAAK,Y,uBCzBZC,EAAO,uCAAG,WAAMZ,GAAN,uBAAAa,EAAA,6DAEbC,EAFa,iDAEoCC,UAAUf,GAF9C,+DAGAgB,MAAMF,GAHN,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,gBAAgBZ,QAVrB,kBAcZM,GAdY,4CAAH,sDCWLO,EAVK,SAAC,GAAW,IAAVL,EAAS,EAATA,IAElB,OACI,sBAAKM,UAAU,yCAAf,UACI,qBAAKC,IAAKP,EAAIR,IAAKgB,IAAKR,EAAIE,QAC5B,4BAAIF,EAAIE,YCiBLO,EApBC,SAAC,GAAgB,IAAf/B,EAAc,EAAdA,SAAc,ECCJ,SAACA,GAAc,IAAD,EAEZD,mBAAS,CAC/BoB,KAAM,GACNa,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAsBtC,OAfAC,qBAAW,WAEPvB,EAAQZ,GACHoC,MAAK,SAAAC,GAEFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAMtB,CAAChC,IAEGiC,EDrByBK,CAAatC,GAAhCyB,EAFe,EAErBN,KAAca,EAFO,EAEPA,QAErB,OACI,qCACI,6BAAKhC,IACJgC,GAAW,2CACZ,qBAAKJ,UAAU,YAAf,SAEQH,EAAOJ,KAAI,SAAAC,GACP,OAAO,cAAC,EAAD,CAEKA,IAAKA,GADAA,EAAIC,aEgB9BgB,EA5BM,WAAO,IAAD,EAEaxC,mBAAS,CAAC,cAFvB,mBAEhBQ,EAFgB,KAEJT,EAFI,KAQvB,OAAO,qCACL,8CACA,uBAEE,cAAC,EAAD,CAAaA,cAAeA,IAE5B,6BAEQS,EAAWc,KAAK,SAACrB,EAAUwC,GAAX,OACZ,cAAC,EAAD,CAEIxC,SAAUA,GADLA,YChB7ByC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.47c5dc71.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport {PropTypes} from 'prop-types'\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n\r\n    const[category, setCategory] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setCategory(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n\r\n        if(category.trim().length>2){\r\n            setCategories(categories => [category, ...categories]);\r\n            setCategory('')\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    onChange={handleInputChange}\r\n                    value={category} \r\n                    type=\"text\" />\r\n            </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory","\r\nexport const getGifs = async(category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)}&limit=10&api_key=yltsDTZn1413UoMvQbUtMWb4IRIkDU5H`\r\n    const resp = await fetch(url)\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_large.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n\r\n}","import React from 'react'\r\n\r\nconst GifGridItem = ({img}) => {\r\n\r\n    return (\r\n        <div className='card animate__animated animate__fadeIn'>\r\n            <img src={img.url} alt={img.title} />\r\n            <p>{img.title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport GifGridItem from './GifGridItem';\r\n\r\nconst GifGrid = ({category}) => {\r\n\r\n    const {data: images, loading} = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n            {loading && <p>Loading...</p>}\r\n            <div className='card-grid'>\r\n                {\r\n                    images.map(img => {\r\n                        return <GifGridItem\r\n                                    key={img.id} \r\n                                    img={img}/>\r\n                })}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../components/helpers/getGifs\";\r\n\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n\r\n        getGifs(category)\r\n            .then(imgs => {\r\n\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n\r\n\r\n            })\r\n\r\n    }, [category])\r\n\r\n    return state\r\n\r\n}","import React, {useState} from 'react'\r\nimport AddCategory from './components/AddCategory'\r\nimport GifGrid from './components/GifGrid'\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['One Punch'])\r\n\r\n    // const handleAdd = (nueva) => {\r\n    //     setCategories([...categories, nueva])\r\n    // }\r\n    \r\n    return(<>\r\n      <h2>GifExpertApp</h2>\r\n      <hr/>\r\n\r\n        <AddCategory setCategories={setCategories}/>\r\n\r\n        <ol>\r\n            {\r\n                categories.map( (category, i) => (\r\n                    <GifGrid\r\n                        key={category}\r\n                        category={category}/>\r\n                ))\r\n            }\r\n        </ol>\r\n\r\n    </>)\r\n\r\n}\r\n\r\nexport default GifExpertApp;\r\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport GifExpertApp from './GifExpertApp'\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n// Crear componente llamado GifExpertApp\n\n\n"],"sourceRoot":""}